# -*- coding: utf-8 -*-
"""query_module.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J1H3QdzCXkDe0OLSxYqLnDQ7dxX61xqf
"""

from dataset_module import*

# main_data = fetchData('data.csv')
main_data = fetchData('data.csv')

# Code to get age list of patient who are smoker and have hypertension and had stroke
ageList = [] #make this list as global variable, which will contain age value from all records
for i in main_data.values():
  if i['Smoking Status'] == 'Formerly smoked' and i['Hypertension'] == '1' and i['Stroke Occurrence'] == '1':
    ageList.append(int(i['Age']))

def computeAvg(list):
  averageAge = sum(list)/len(list) #mean = {sum of elements / number of elements} in the list
  return int(averageAge)

def computeMode(list):
    return max(set(list), key=list.count)

def computeMedian(list):
  size = len(list)
  sortedAgeList = sorted(list)
  if size % 2 == 0:
    mid1 = size // 2
    mid2 = (size // 2) - 1
    median = (sortedAgeList[mid1] + sortedAgeList[mid2]) / 2
  else:
    mid = size // 2
    median = sortedAgeList[mid]
  return median

"""xii.	The outputs of any of these functions should be persisted into an external file in csv format.

Started at: 14-04-2025 01:29 AM

Finished at: 14-04-2025 05:50 AM
"""

def save_to_csv(filename, headers, data):
    #Save query results to a CSV file.
    with open(filename, 'w') as f:
        f.write(','.join(headers) + '\n')
        if isinstance(data, dict):
            for key, value in data.items():
                if isinstance(value, dict):
                    row = [key] + [str(value.get(h, '')) for h in headers[1:]]
                else:
                    row = [key, str(value)]
                f.write(','.join(row) + '\n')
        elif isinstance(data, list):
            for row in data:
                f.write(','.join([str(x) for x in row]) + '\n')

"""i.	A function for computing the average age, modal age, median age of those who smoked and had hypertensions that resulted in stroke.

Started at: 13-03-2025 02:05AM
Finished at: 22-03-2025 10:22PM

Sources:-
1. https://www.w3schools.com/python/gloss_python_loop_dictionary_items.asp
2. https://www.bbc.co.uk/bitesize/articles/zj6nb7h#zdnv46f
"""

def querySmokeHypertensionAndStroke():

  avg = computeAvg(ageList) # Average age
  mode = computeMode(ageList) # Modal age
  median = computeMedian(ageList) # Median age

  result = {
      'Average Age': avg,
      'Modal Age': mode,
      'Median Age': median
  }
  return result

"""ii.	A function for computing the average age, modal age, median age, and average glucose level of those who had heart disease that resulted in stroke.

**Started at:** 22-03-2025 10:32PM

**Finished at:** 22-03-2025 11:35 PM
"""

#Code to get age list of patient who have heart disease and had stroke
def queryHeartDiseaseAndStroke():

  glucoseLevelList = []
  ageListQ2 = []

  for i in main_data.values():
      if str(i.get('Heart Disease')) == '1' and str(i.get('Stroke Occurrence')) == '1':
          ageListQ2.append(int(i['Age']))
          glucoseLevelList.append(float(i['Average Glucose Level']))

  avg2 = computeAvg(ageListQ2) # Average age
  mode2 = computeMode(ageListQ2) # Modal age
  median2 = computeMedian(ageListQ2) # Median age
  glucoseAvg = computeAvg(glucoseLevelList) # Average glucose level

  result = {
      'Average Age': avg2,
      'Modal Age': mode2,
      'Median Age': median2,
      'Average Glucose Level': glucoseAvg
  }
  return result

# import numpy as np
# from scipy import stats
# np.mean(ageListQ2)
# np.median(ageListQ2)
# stats.mode(ageListQ2)
# np.mean(glucoseLevelList)

"""iii.	A function for computing the average age, modal age, median age of patients based on genders of those whose **hypertensions resulted in stroke** and of those whose **hypertensions did not result in stroke**.

Started at: 22-03-2025 11:35 PM

Finished at: 23-03-2025 12:36 AM
"""

def queryHypertensionAndStroke():
  male_hypertension_stroke = []
  male_hypertension = []
  female_hypertension_stroke = []
  female_hypertension = []

  for i in main_data.values():
      #code for males with hypertension and stroke
      if str(i.get('Hypertension')) == '1' and str(i.get('Stroke Occurrence')) == '1' and str(i.get('Gender')) == 'Male':
        male_hypertension_stroke.append(int(i['Age']))

      #code for males with hypertension but never got stroke
      elif str(i.get('Hypertension')) == '1' and str(i.get('Stroke Occurrence')) == '0' and str(i.get('Gender')) == 'Male':
        male_hypertension.append(int(i['Age']))

      elif str(i.get('Hypertension')) == '1' and str(i.get('Stroke Occurrence')) == '1' and str(i.get('Gender')) == 'Female':
        female_hypertension_stroke.append(int(i['Age']))

      elif str(i.get('Hypertension')) == '1' and str(i.get('Stroke Occurrence')) == '0' and str(i.get('Gender')) == 'Female':
        female_hypertension.append(int(i['Age']))


  # MALE
  avg_male_hypertension_stroke = computeAvg(male_hypertension_stroke) # Average age of male with HYP & STK
  avg_male_hypertension = computeAvg(male_hypertension) # Average age of male with HYP but no STK

  modal_male_hypertension_stroke = computeMode(male_hypertension_stroke) # Modal age of male with HYP & STK
  modal_male_hypertension = computeMode(male_hypertension) # Modal age of male with HYP but no STK

  median_male_hypertension_stroke = computeMedian(male_hypertension_stroke) # Median age of male with HYP & STK
  median_male_hypertension = computeMedian(male_hypertension) # Median age of male with HYP but no STK

  # FEMALE
  avg_female_hypertension_stroke = computeAvg(female_hypertension_stroke) # Average age of female with HYP & STK
  avg_female_hypertension = computeAvg(female_hypertension) # Average age of female with HYP but no STK

  modal_female_hypertension_stroke = computeMode(female_hypertension_stroke) # Modal age of female with HYP & STK
  modal_female_hypertension = computeMode(female_hypertension) # Modal age of female with HYP but no STK

  median_female_hypertension_stroke = computeMedian(female_hypertension_stroke) # Median age of female with HYP & STK
  median_female_hypertension = computeMedian(female_hypertension) # Median age of female with HYP but no STK

  result = {
    "Male with Hypertension & Stroke": {
        "Average Age": avg_male_hypertension_stroke,
        "Modal Age": modal_male_hypertension_stroke,
        "Median Age": median_male_hypertension_stroke
    },
    "Male with Hypertension (No Stroke)": {
        "Average Age": avg_male_hypertension,
        "Modal Age": modal_male_hypertension,
        "Median Age": median_male_hypertension
    },
    "Female with Hypertension & Stroke": {
        "Average Age": avg_female_hypertension_stroke,
        "Modal Age": modal_female_hypertension_stroke,
        "Median Age": median_female_hypertension_stroke
    },
    "Female with Hypertension (No Stroke)": {
        "Average Age": avg_female_hypertension,
        "Modal Age": modal_female_hypertension,
        "Median Age": median_female_hypertension
    }
  }
  return result

"""iv.	A function for computing the average age, modal age, median age of those whose smoking habits result in stroke and for those whose smoking habit did not result in stroke

**Started at**: 23-03-2025 12:36 AM

**Finished at**: 23-03-2025 01:14 AM
"""

def querySmokingHabitsAndStroke():
  stroke_smoker_age = []
  no_stroke_smoker_age = []

  for i in main_data.values():
      # print(str(i.get('Smoking Status')))
      if i['Smoking Status'] == 'Formerly smoked' and i['Stroke Occurrence'] == '1':
        stroke_smoker_age.append(int(i['Age']))
      elif i['Smoking Status'] == 'Formerly smoked' and i['Stroke Occurrence'] == '0':
        no_stroke_smoker_age.append(int(i['Age']))

  results = {
      'Smoking habits result in stroke': {
          'Average age': computeAvg(stroke_smoker_age),
          'Modal age': computeMode(stroke_smoker_age),
          'Median age': computeMedian(stroke_smoker_age),
      },
      'Smoking habit did not result in stroke': {
          'Average age': computeAvg(no_stroke_smoker_age),
          'Modal age': computeMode(no_stroke_smoker_age),
          'Median age': computeMedian(no_stroke_smoker_age),
      }
  }
  return results

"""v.	A function for computing the average age, modal age, median age of those who lived in urban areas and for those in rural areas that had stroke.

**Started at**: 23-03-2025 01:14 AM

**Finished at**: 23-03-2025 01:23 AM
"""

def queryResidencyType():
  urban_people = []
  rural_people = []
  for i in main_data.values():
    if i['Residence Type'] == 'Urban' and i['Stroke Occurrence'] == '1':
      urban_people.append(int(i['Age']))
    elif i['Residence Type'] == 'Rural' and i['Stroke Occurrence'] == '1':
      rural_people.append(int(i['Age']))

  results = {
      'People living in cities': {
          'Average age': computeAvg(urban_people),
          'Modal age': computeMode(urban_people),
          'Median age': computeMedian(urban_people),
      },
      'People living in rural areas': {
          'Average age': computeAvg(rural_people),
          'Modal age': computeMode(rural_people),
          'Median age': computeMedian(rural_people),
      }
  }
  return results

"""vi.	A function to retrieves the dietary habit(s) of those who had stroke and those who did not have stroke.

**Started at**: 23-03-2025 01:23 AM

**Finished at**: 23-03-2025 11:29 PM
"""

def queryDietaryHabits():
    stroke_habits = []
    no_stroke_habits = []

    for i in main_data.values():
      if i['Stroke Occurrence'] == '0':
        stroke_habits.append(i['Dietary Habits'])
      elif i['Stroke Occurrence'] == '1':
        no_stroke_habits.append(i['Dietary Habits'])

    result = {
        'Stroke': stroke_habits,
        'No Stroke': no_stroke_habits
    }

    return result

"""vii.	A function that returns anyone whose hypertension resulted in stroke.
Started at: 14-04-2025 05:01 AM

Finished at: 14-03-2025 05:15 AM
"""

def queryHypertensionStroke():
  hypertension_stroke = []

  for i in main_data.values():
    if i['Hypertension'] == '1' and i['Stroke Occurrence'] == '1':
      hypertension_stroke.append(i)

  headers = list(hypertension_stroke[0].keys())
  rows = [[row[h] for h in headers] for row in hypertension_stroke]
  save_to_csv('hypertension_stroke_individuals.csv',headers, rows)
  return hypertension_stroke

"""viii.	A function to retrieve those who hypertension did not result in stroke and those whose hypertension resulted in stroke"""

def query_hypertension_all():
    stroke = [r for r in main_data.values() if r.get('Hypertension') == '1' and r.get('Stroke Occurrence') == '1']
    no_stroke = [r for r in main_data.values() if r.get('Hypertension') == '1' and r.get('Stroke Occurrence') == '0']
    result = {'Stroke': stroke, 'No Stroke': no_stroke}
    #save_to_csv('hypertension_all.csv', list(data[next(iter(data))].keys()), stroke + no_stroke)
    headers = list(stroke[0].keys())
    rows = [[row[h] for h in headers] for row in stroke + no_stroke]
    save_to_csv('hypertension_all.csv',headers, rows)

    return result

"""ix.	A function that returns everyone with heart disease that has stroke."""

def query_heart_disease_stroke_individuals():
    individuals = [r for r in main_data.values() if r.get('Heart Disease') == '1' and r.get('Stroke Occurrence') == '1']
    headers = list(individuals[0].keys())
    rows = [[row[h] for h in headers] for row in individuals]
    save_to_csv('heart_disease_stroke_individuals.csv',headers, rows)
    return individuals

"""x.	A function that returns the descriptive statistics of any of the features of the dataset. This function should ask for which feature to analyse and then return the statistics. The descriptive statistics are mean, standard deviation, minimum, maximum, 25%, 50%, and 75%."""

def query_descriptive_stats():
    feature = input("Enter feature to analyze (e.g., Age, Average Glucose Level): ")
    values = [float(r[feature]) for r in main_data.values() if feature in r and r[feature].replace('.','',1).isdigit()]
    if not values:
        return "Invalid feature or no numeric data"
    sorted_vals = sorted(values)
    size = len(sorted_vals)
    result = {
        'Mean': computeAvg(values),
        'Std Dev': (sum((x - computeAvg(values)) ** 2 for x in values) / size) ** 0.5,
        'Min': min(values),
        'Max': max(values),
        '25%': sorted_vals[int(size * 0.25)],
        '50%': computeMedian(values),
        '75%': sorted_vals[int(size * 0.75)]
    }
    return result

"""xi.	A function to retrieve the average sleep hours of those who had stroke and those who did not have stroke"""

def query_sleep_hours():
    stroke_hours = [float(r['Sleep Hours']) for r in main_data.values() if r.get('Stroke Occurrence') == '1' and 'Sleep Hours' in r]
    no_stroke_hours = [float(r['Sleep Hours']) for r in main_data.values() if r.get('Stroke Occurrence') == '0' and 'Sleep Hours' in r]
    result = {
        'Stroke': computeAvg(stroke_hours),
        'No Stroke': computeAvg(no_stroke_hours)
    }
    save_to_csv('sleep_hours.csv', ['Group', 'Average Sleep Hours'], result)
    return result

"""xii. Please check above, before question 1"""